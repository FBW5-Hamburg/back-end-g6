<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Font Awesome -->
    <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css"
        integrity="sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk="
        crossorigin="anonymous"
    />
    <!-- CSS -->
    <link rel="stylesheet" href="/css/style.css" />
    <title>ChatApp</title>
    </head>
    <body>
    <div class="chat-container">
        <header class="chat-header">
            <!-- <h1><i class="fas fa-smile"></i> ChatCord</h1> -->
            <h1>ChatApp</h1>
            <h2 class="room-name"></h2>
            <button class="btn"><i class="fas fa-times"></i></button>
        </header>
        <main class="chat-main">
            <div class="chat-sidebar">
                <h3><i class="fas fa-comments"></i> Room</h3>
                <h2 class="room-name"></h2>
                <h3><i class="fas fa-users"></i> Users</h3>
                <ul id="users"></ul>
            </div>
            <div class="chat-messages"></div>
        </main>
        <div class="chat-form-container">
            <nav>
                 <!-- <button class="btn"><i class="fas fa-file"></i></button> -->
                <label for="images">
                   <button class="btn"><i class="fas fa-file-image"></i></button>
                   <input type="file" id="image-upload" accept="image/x-png,image/gif,image/jpeg" />
                </label>
                <button class="btn"><i class="fas fa-arrow-alt-circle-right"></i></button>
            </nav>
            <form id="chat-form">
                <input id="msg-inp" type="text" class="emoji" placeholder="Enter Message" required autocomplete="off"/>
                <button class="btn"><i class="fas fa-paper-plane"></i></button>
            </form>
        </div>
    </div>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.9.2/qs.min.js"
        integrity="sha256-TDxXjkAUay70ae/QJBEpGKkpVslXaHHayklIVglFRT4="
        crossorigin="anonymous"
    ></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/emojiPicker.js"></script>
    <script>
/* ************************************************************ VARIABLES ******************************************************* */
        const chatForm = document.getElementById('chat-form');
        const chatMessages = document.querySelector('.chat-messages');
        const roomName = document.getElementsByClassName('room-name');
        const userList = document.getElementById('users');
        // user variables
        const username = '<%=username%>';
        const room = '<%=chatRoom%>';
        const roomID = '<%=roomID%>';
        // output old messages
        const oldmessages = '<%-oldMessages%>';
        const oldMessagesObj = JSON.parse(oldmessages);
        oldMessagesObj.forEach(element => {
            outputMessage(element);
        });

/* ************************************************************ EVENTS ******************************************************* */
        // leave room
        document.querySelector('nav > .btn:last-child').addEventListener('click', e => {
            e.preventDefault();
            window.location = '/room';
        });
        // logout
        document.querySelector('header > .btn').addEventListener('click', e => {
            e.preventDefault();
            window.location = '/logout';
        });

        // upload images
        const imgsInp = document.getElementById('image-upload');
        // activate file input
        document.querySelector('label > button').addEventListener('click', e => {
            e.preventDefault();
            imgsInp.click();
        });
        // get image files
        imgsInp.addEventListener('change', e => {
            // create file reader object
            const fr = new FileReader();
            const file = e.target.files[0];
            const filename = e.target.files[0].name;
            const filesize = e.target.files[0].size;
            // check if filesize is smaller than 6 MB
            if(file && filesize < (6 * 1024 * 1024)) {
                // will be executed when the file finished uploading
                fr.onload = e => {
                    // this will take each part of the image
                    const base64 = e.target.result.replace(/.*base64,/, '');
                    // sent to server
                    socket.emit('image',{base64, filename, username, room, roomID});
                };
                // read image and divide it in many parts
                fr.readAsDataURL(file);
            } else {
                // prevent default and display error
                e.preventDefault();
                alert('Only a maximum size of 6 MB is allowed');
            };
        });

/* ************************************************************ SOCKET.IO ******************************************************* */
        // initiate socket
        const socket = io();
        // join chatroom
        socket.emit('joinRoom', { username, room, roomID });
        // get room and users
        socket.on('roomUsers', ({ room, users }) => {
            outputRoomName(room);
            outputUsers(users);
        });
        // get message from server
        socket.on('message', message => {
            outputMessage(message);
            // scroll down
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });
        // submit message 
        chatForm.addEventListener('submit', e => {
            e.preventDefault();
            // get message text
            const msg = e.target.elements.msg.value;
            // emit message to server
            socket.emit('chatMessage', { msg, username, room, roomID });
            // clear input
            e.target.elements.msg.value = '';
            e.target.elements.msg.focus();
        });

/* ************************************************************ FUNCTIONS ******************************************************* */
        // output message to DOM
        function outputMessage(message) {
            const div = document.createElement('div');
            div.classList.add('message');
            // check if message is image URL
            if (message.text.startsWith("/upload")) {
                div.innerHTML = `<p class="meta">${message.username} <span>${message.time}</span></p><image id="image" src="${message.text}" />`;
            } else {
                div.innerHTML = `<p class="meta">${message.username} <span>${message.time}</span></p><p class="text">${message.text}</p>`;
            };
            document.querySelector('.chat-messages').appendChild(div);
        };
        // add room name to DOM
        function outputRoomName(room) {
            for(let i = 0; i < roomName.length; i++) {
                roomName[i].innerText = room;
            };
        };
        // add users to DOM
        function outputUsers(users) {
            userList.innerHTML = `${users.map(user => `<li>${user}</li>`).join('')}`;
        };
    </script>
    </body>
</html>
